
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - app_name
  - service_name
  - installation_folder
  - launcher_file_name
  - audio_port
  - service_plist_file_path
  - ansible_user_id
  - autologin_pass
  - temp_folder
  - java_bin

# set temp and logs folder

- name: make sure temp folder exists
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: make sure audio_installation_folder exists
  file:
    path: "{{ audio_installation_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: make sure conf folder exists
  file:
    path: "{{ audio_installation_folder }}/conf"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: make sure logs folder exists
  file:
    path: "{{ audio_installation_folder }}/logs"
    state: directory
    mode: 0777
    owner: "{{ ansible_user_id }}"
  become: yes

- name: make sure LaunchAgents folder exists
  file:
    path: "~/Library/LaunchAgents"
    state: directory
    mode: 0755
    owner: "{{ ansible_user_id }}"

# install java dependency

- name: check if java is installed
  stat:
    path: "{{ java_bin }}/java"
  register: java_exists

- name: install java
  block:

    - name: download java from s3 url
      get_url:
        url: "{{ java_download_url }}"
        dest: "{{ temp_folder }}/{{ java_download_filename }}"
        timeout: "{{ download_timeout | default(60) }}"
    
    - name: make sure java installation folder exists
      file:
        path: "{{ java_installation_folder }}"
        state: directory
        owner: "{{ ansible_user_id }}"
      become: yes
    
    - name: unzip java file
      command: "tar -xzvf {{ temp_folder }}/{{ java_download_filename }} -C {{ java_installation_folder }}"
      args:
        creates: "{{ java_bin }}/java"
      become: yes
      register: unzip_java
      ignore_errors: yes
    
    - name: sleep for 25 seconds if unzip java fails
      pause:
        seconds: 25
      when: unzip_java.rc != 0
    
    - name: rerun - unzip java file
      command: "tar -xzvf {{ temp_folder }}/{{ java_download_filename }} -C {{ java_installation_folder }}"
      args:
        creates: "{{ java_bin }}/java"
      become: yes
      when: unzip_java.rc != 0

  when: not java_exists.stat.exists

- name: make sure java is installed on the machine
  command: "{{ java_bin }}/java -version"
  register: java_test
  become: yes
  ignore_errors: yes

- name: fail if java is not found
  fail:
    msg: "java must be accesible in path {{ java_bin }}"
  when: java_test.rc != 0

# stop old service

- name: stop the old service
  command: "launchctl unload {{ service_plist_file_path }}"
  ignore_errors: yes

# copy files to scipts folder

- name: copy autologin files to temp folder
  copy:
    src: "{{item}}"
    dest: "{{ temp_folder }}"
    mode: '0777'
  with_items:
    ['enable_autologin','kcpassword']
  

# enable autologin

- name: enable autologin
  command:  "sudo /bin/sh enable_autologin {{ ansible_user_id }} {{ autologin_pass }}"
  args:
    chdir: "{{ temp_folder }}"
  notify:
    - start the service


# configure audio properties

- name: copy audio.properties file
  template:
    src: audio.properties.j2
    dest: "{{ audio_installation_folder }}/conf/audio.properties"
    group: admin
    mode: '0777'
  become: yes

- name: copy logback-audio.xml file
  template:
    src: logback-audio.xml.j2
    dest: "{{ audio_installation_folder }}/conf/logback-audio.xml"
    group: admin
    mode: '0777'
  become: yes

- name: copy launcher file
  template:
    src: audiostart.sh.j2
    dest: "{{ audio_installation_folder }}/{{ launcher_file_name }}"
    group: admin
    mode: '0777'
  become: yes

# copy audio plist

- name: copy audio plist
  template:
    src: audiosupport.plist.j2
    dest: "{{ service_plist_file_path }}"
    owner: "{{ ansible_user_id }}"
    group: staff
    mode: '0755'

# add plist to audio-support folder for debugging

- name: add plist to audio-support folder
  template:
    src: audiosupport.plist.j2
    dest: "{{ installation_folder }}/audio-support/{{ service_name }}.plist"
    group: admin
    mode: '0755'
  become: yes
